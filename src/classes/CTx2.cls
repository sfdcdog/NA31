public class CTx2{
    
    public static XT service1;
    public static XT service2;
    
    public CTx2(){

    }

    public static string virMethod1XTa(){
        service1 = new XTa();
        List<String> clients = service1.abMethod1('CTx2');
        
        String value = service1.virMethod1();
        return value;
    }

    public static string virMethod1XTb(){
        service2 = new XTb();
        List<String> clients = service2.abMethod1('CTx2');
        
        String value = service2.virMethod1();
        return value;
    }
/*
java wrapper class: http://www.w3resource.com/java-tutorial/java-wrapper-classes.php

https://www.google.com/search?q=wrapper+class+example&oq=wrapper+class+example&aqs=chrome..69i57j0l5.6855j0j7&sourceid=chrome&ie=UTF-8
https://www.quora.com/What-is-best-example-that-I-can-give-for-explaining-the-use-of-Wrapper-Class-in-Java
https://developer.salesforce.com/page/Wrapper_Class
https://www.javatpoint.com/wrapper-class-in-java
https://stackoverflow.com/questions/889160/what-is-a-wrapper-class
http://ecomputernotes.com/java/what-is-java-classes/what-is-the-difference-between-abstraction-and-encapsulation
http://www.tutorialspoint.com/java/java_encapsulation.htm
http://www.tutorialspoint.com/java/java_abstraction.htm
https://stackoverflow.com/questions/4966710/what-is-the-difference-between-abstraction-and-encapsulation?noredirect=1&lq=1
https://stackoverflow.com/questions/742341/difference-between-abstraction-and-encapsulation
*/
/**important**/
//https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html

//https://gist.github.com/vvilp/7006187


/*
Free 90 Day Extended Trial of IntelliJ Ultimate Edition Now Available
Section 2, Lecture 5
13th April 2017

Great news!

I have negotiated an extended 90 day license for you to use the IntelliJ Ultimate edition from Jetbrains, the makers of IntelliJ. This is an extra 60 days of free access to this incredible tool.

Details on how to download and install this software is in the following videos.

All you need to do to get the 90 day license is to email license@timbuchalka.com

I will then reply with your unique coupon code, and a document explaining how you go about registering with Jetbrains on their website.

Don't worry, I won't ever spam you, or even store your email.  This is a once off email to get the code to you, along with a PDF that contains the instructions you need.  I will never email you again after that! 

Please also note that I am unable to answer "support" questions on that email address.  It's strictly for licenses only.  Please use the Q&A section of the course for any questions you have. 

You can still use the community edition of IntelliJ if you prefer, but I recommend you start off with IntelliJ Ultimate first.

Note:  This is just me doing this for you in my "spare" time.  Please give me 24-48 hours to respond, and in a worse case scenario, it might be 72 hours before I get the code back to you.  I make nothing out of this, it's purely to give you an extended trial for free.    I am usually busy with course content, and on weekends I do take some time off  :)

NOTE:  You already have a 30 day free trial when you download IntelliJ Ultimate.  So there is no urgency to add the 90 day trial.  It will continue to work for 30 days, even without this code.

Rest assured I will get back to you with your code!

In the meantime, you can go ahead and use the free community edition, or download the trial version of the Ultimate edition and get that 30 day trial while you wait.  More info is in the following video.

Enjoy!

regards

Tim

*/

//https://stackoverflow.com/questions/1697273/differences-between-static-and-instance-variables-in-python-do-they-even-exist

/*======================================================================================================================================

1) https://www.google.com/search?q=encapsulation+in+java&oq=encap&aqs=chrome.3.69i57j0l5.3047j0j7&sourceid=chrome&ie=UTF-8
2) https://stackoverflow.com/questions/11965929/abstraction-vs-encapsulation-in-java
3) https://en.wikipedia.org/wiki/Composition_over_inheritance
4) https://en.wikipedia.org/wiki/Object_composition
5) https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/langCon_apex_collections_iterating.htm
6) https://www.javatpoint.com/abstract-class-in-java
7) http://www.visionsdeveloper.com/tutorial/java/java-abstraction.jsp
8) https://stackoverflow.com/questions/18777989/how-should-i-have-explained-the-difference-between-an-interface-and-an-abstract/34978606
9) http://www.journaldev.com/129/how-to-create-immutable-class-in-java
10) https://stackoverflow.com/questions/4658453/difference-between-mutable-objects-and-immutable-objects
11) https://en.wikipedia.org/wiki/Object-oriented_programming
12) http://www.journaldev.com/1325/what-is-composition-in-java-java-composition-example
13) http://www.journaldev.com/1775/multiple-inheritance-in-java
14) https://salesforce.stackexchange.com/questions/77007/multiple-hybrid-inheritance-allowed-in-apex

*/

}